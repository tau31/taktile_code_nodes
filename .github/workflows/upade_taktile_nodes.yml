on:
  pull_request:
    types: [synchronize]    
    branches:
    - main
    
defaults:
  run:
    shell: bash

jobs:
  update_taktile_nodes:  
    env:
      NODES_TO_PATCH: Multiply Summarize  
    runs-on: ubuntu-22.04
    steps:
      - name: Prepare data body and headers to post to API
        run: |
          # data body to enter data for each API call as needed
          echo '{
            "data": {
            },
            "metadata": {
              "version": "v1.0",
              "entity_id": "string"
            },
            "control": {
              "execution_mode": "sync"
            }
          }' > data_body.json

          # create header file to simplify each API call
          echo "accept: application/json\nContent-Type: application/json\nX-API-Key: $API_KEY" > headers_file 



      
      - name: Get Organization flow_id
        run: | 
          # Prepare data to post to get flow_id from organization
          jq --arg org_name "${{ vars.ORG_NAME }}" '.data |= (.organization_name = $org_name)' data_body.json > list_flows_data.json

          # Post to List Decision Flows API to obtain List of Flows
          curl -s \
          https://eu-central-1.taktile-org.decide.taktile.com/run/api/v1/flows/list-decision-graphs/sandbox/decide \
          -H @header_file \
          -d @list_flows_data.json > flow_res.json 
          # curl -s https://eu-central-1.taktile-org.decide.taktile.com/run/api/v1/flows/list-decision-graphs/sandbox/decide -H 'accept: application/json' -H 'Content-Type: application/json' -H "X-API-Key: ${{ secrets.TAKTILE_API_KEY }}" -d @list_flows_data.json > flow_res.json 

          # # Parse flow_id from response 
          # #! Here I am assuming that this org only has one flow
          # #! Another algorithm that iterates over flows to update specific python files might be necessary
      
      - name: Get and Parse decision graph information
        run: |
          flow_id=$(jq -r '.data.flows[].flow_id' flow_res.json)

          # Get Decision graph for a flow_id
          jq --arg flow_id "$flow_id" '.data |= (.flow_id = $flow_id)' data_body.json > get_dec_graph_data.json

          curl -s https://eu-central-1.taktile-org.decide.taktile.com/run/api/v1/flows/get-decision-graph/sandbox/decide -H 'accept: application/json' -H 'Content-Type: application/json' -H "X-API-Key: ${{ secrets.TAKTILE_API_KEY }}" -d @get_dec_graph_data.json > dec_graph_res.json
          
          status=$(jq '.status' dec_graph_res.json)

      - name: Extract data from decision graph to use on update call 
        run: |
          for file_name in $NODES_TO_PATCH
          do
            jq \
              --arg file "$file_name" \
              '.data.graph[]  | select(.node_name == $file) | {name: .node_name, node_id: .node_id, src_code: .meta.src_code}' \
              dec_graph_res.json >> to_update.json
          done
          echo $(cat to_update.json)
                  

                